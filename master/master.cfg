# -*- python -*-
# ex: set syntax=python:

import sys, os
import buildbot
#######

NotDebug = True

masterHost = "192.168.0.5"
masterSlavePort = 9989

# tux3 git repo
tux3_repo = "git://github.com/OGAWAHirofumi/tux3.git"
tux3_branches = ['master', 'hirofumi']

# kernel git repo
KERN_BASE = "git://git.kernel.org/pub/scm/linux/kernel/git"
kern_repo = KERN_BASE + "/torvalds/linux.git"
kern_stable_repo = KERN_BASE + "/stable/linux-stable.git"
#kern_stable_vers = ['3.6', '3.7']
kern_stable_vers = ['3.6']

# Define slaves
slaves_def = {
    'i386': [
        { 'name': "i386-slave0", 'pass': None, 'kvm_host': False, },
        { 'name': "i386-slave1", 'pass': None, 'kvm_host': True,
          'kvm_cpus': 2, 'kvm_mem': 1024, 'kvm_port': 11111, },
        { 'name': "x86_64-slave1", 'pass': "", 'kvm_host': True,
          'kvm_cpus': 2, 'kvm_mem': 1024, 'kvm_port': 11112, },
    ],
    'x86_64': [
        { 'name': "x86_64-slave0", 'pass': None, 'kvm_host': False, },
        { 'name': "x86_64-slave1", 'pass': None, 'kvm_host': True,
          'kvm_cpus': 2, 'kvm_mem': 1024, 'kvm_port': 12111, },
    ],
}

# Get password from "master/slaves-pass/<slavename>", then update "slaves_def"
for arch in slaves_def.keys():
    for slave in slaves_def[arch]:
        if slave['pass'] is None:
            passwd_dir = os.path.join(os.path.dirname(__file__), "slaves-pass")
            # get the password based on the name
            path = os.path.join(passwd_dir, slave['name'])
            slave['pass'] = open(path).read().strip()

# Option for kernel serial console
serial_console_opt = {
    'i386': 'console=ttyS0,115200 console=tty0',
    'x86_64': 'console=ttyS0,115200 console=tty0',
}

basic_slaves = {}
kvm_host_slaves = {}
stress_slaves = {}
for arch in slaves_def.keys():
    basic_slaves[arch] = [
        s['name'] for s in slaves_def[arch] if not s['kvm_host']
    ]
    stress_slaves[arch] = [
        s['name'] for s in slaves_def[arch] if s['kvm_host']
    ]

# Builders and associated slaves
def user_buildname(arch):
    return "userspace-%s" % arch
def kern_buildname(arch, ver):
    return "kernel-%s-%s" % (ver, arch)
def stress_buildname(arch, ver):
    return "stress-%s-%s" % (ver, arch)

user_builders = []
kern_stable_builders = []
for arch in basic_slaves.keys():
    user_builders += [ user_buildname(a) for a in basic_slaves.keys() ]
    kern_stable_builders += [
        kern_buildname(arch, ver) for ver in kern_stable_vers
    ]
stress_builders = []
for arch in stress_slaves.keys():
    stress_builders += [
        stress_buildname(arch, ver) for ver in kern_stable_vers
    ]

# Builders for "basic" schedule
basic_builders = user_builders
# All builders for "force" schedule
all_builders = user_builders + kern_stable_builders + stress_builders

####### CONFIGS

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

c['slaves'] = []

for arch in slaves_def.keys():
    for slave in slaves_def[arch]:
        # Add slave
        c['slaves'].append(BuildSlave(
            name=slave['name'],
            password=slave['pass'],
            max_builds=1,
        ))

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = masterSlavePort

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller

c['change_source'] = []

# If 0.8.7p1 or above, use "branches" option.
if buildbot.version == "0.8.6p1":
    for branch in tux3_branches:
        c['change_source'].append(GitPoller(
            repourl=tux3_repo, branch=branch,
            workdir="gitpoller-workdir-%s" % branch,
            pollinterval=300))
else:
    c['change_source'].append(GitPoller(
        repourl=tux3_repo, branches=tux3_branches,
        workdir="gitpoller-workdir-tux3",
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming
# changes.

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.triggerable import Triggerable
from buildbot.changes.filter import ChangeFilter

c['schedulers'] = []

# Base schedulers
c['schedulers'].append(AnyBranchScheduler(
    name="basic",
    treeStableTimer=60,
    builderNames=basic_builders,
))

c['schedulers'].append(ForceScheduler(
    name="force",
    builderNames=all_builders,
))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to
# perform a build: what steps, and which slaves can execute them.
# Note that any particular build will only take place on one slave.

import textwrap

from buildbot.process.factory import BuildFactory
from buildbot.process.properties import WithProperties
from buildbot.process import build
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, Compile, Test, SetProperty
from buildbot.steps.trigger import Trigger
from buildbot.steps.transfer import FileUpload, FileDownload, DirectoryUpload
from buildbot.steps.slave import RemoveDirectory
from buildbot.status.builder import SUCCESS, FAILURE
from buildbot.config import BuilderConfig

c['builders'] = []

# warning patterns
gccWarnPattern = "^(.*?):([0-9]+):([0-9]+:)? ([Ww]arning|[Ee]rror): (.*)$"
modpostPattern = "^(WARNING|ERROR|FATAL): .*$"

# tux3 command name
tux3cmd_name = "tux3"

# Slaves set
def find_slave(arch, slavename):
    for slave in slaves_def[arch]:
        if slavename == slave['name']:
            return slave

def getVmlinuz(ver):
    return "vmlinuz-%s" % ver

def getVmlinuxXz(ver):
    return "vmlinux-%s.xz" % ver
def getVmlinuxXz_path(ver):
    return "%s/%s" % ("%(master_basedir)s", getVmlinuxXz(ver))

# Run compile, basic tests, coverage
def user_steps(arch):
    # Upload place for gcov
    gcovURL = "gcov/%s/%s" % (arch, "%(buildnumber)s-%(branch)s")
    # Upload place for compiled binaries
    master_basedir = "binaries/%s/%s" % (arch, "%(buildnumber)s")
    return [
        # Checkout tux3 (checkout at last to set proper got_revision)
        Git(
            repourl=tux3_repo,
            branch="master",
            mode="full",
            method="copy",
            description=[WithProperties('updating %(branch)s')],
            descriptionDone=[WithProperties('update %(branch)s')],
            name="git tux3",
        ),
        # Compile userspace commands with sparse and coverage
        Compile(
            command="make CHECK=1 GCOV=1",
            workdir="build/user",
            warningPattern=gccWarnPattern,
        ),
        # Test
        Test(
            command="make tests",
            workdir="build/user",
        ),
        # Upload tux3 command
        FileUpload(
            slavesrc="user/%s" % tux3cmd_name,
            masterdest=WithProperties(
                "public_html/" + master_basedir + "/%s" % tux3cmd_name
            ),
            url=WithProperties("/" + master_basedir + "/%s" % tux3cmd_name),
        ),
        # Start kernel build for each versions
        Trigger(
            schedulerNames=[
                kern_buildname(arch, ver) for ver in kern_stable_vers
            ],
            waitForFinish=False,
            updateSourceStamp=True,
            set_properties={ 'master_basedir': WithProperties(master_basedir) },
        ),
        # Collect coverage info
        ShellCommand(
            command="make coverage",
            workdir="build/user",
            haltOnFailure=True,
            description=['coverage'],
            descriptionDone=['coverage'],
            name="coverage report",
        ),
        # Upload coverage info
        DirectoryUpload(
            slavesrc="user/gcov",
            masterdest=WithProperties('public_html/' + gcovURL),
            url=WithProperties('/' + gcovURL),
        ),
    ]

# Run kernel compile
def kern_steps(arch, ver):
    stable_branch = "linux-%s.y" % ver
    stable_workdir = "linux-%s" % ver
    master_vmlinuz_path = "%s/%s" % ("%(master_basedir)s", getVmlinuz(ver))
    return [
        # Check whether need to clone linux-stable
        SetProperty(
            property="need_clone",
            command=textwrap.dedent("""\
            if [ -f linux-stable.git/config ]; then
                echo N
            else
                echo Y
            fi
            """).strip(),
            workdir="..",
            hideStepIf=NotDebug,
        ),
        # Clone linux-stable tree if need
        ShellCommand(
            command="git clone --progress --mirror %s" % kern_stable_repo,
            workdir="..",
            doStepIf=lambda step: step.build.getProperty("need_clone") == "Y",
            haltOnFailure=True,
            description=['cloning linux-stable'],
            descriptionDone=['clone linux-stable'],
            name="git clone linux-stable",
        ),
        ShellCommand(
            command="git --git-dir=linux-stable.git fetch --progress --all",
            workdir="..",
            haltOnFailure=True,
            description=['updating linux-stable'],
            descriptionDone=['update linux-stable'],
            name="git linux-stable",
        ),
        # Clone linux-x.y from local linux-stable
        Git(
            repourl="../../linux-stable.git",
            branch=stable_branch,
            mode="full",
            method="fresh",
            alwaysUseLatest=True,
            workdir=stable_workdir,
            description=['updating %s' % stable_branch],
            descriptionDone=['update %s' % stable_branch],
            name="git %s" % stable_branch,
        ),
        # Checkout tux3 (checkout at last to set proper got_revision)
        Git(
            repourl=tux3_repo,
            branch="master",
            mode="full",
            method="copy",
            description=[WithProperties('updating %(branch)s')],
            descriptionDone=[WithProperties('update %(branch)s')],
            name="git tux3",
        ),
        # Patch kernel
        ShellCommand(
            command=textwrap.dedent("""\
            sed -ie '/reiserfs/i\source "fs/tux3/Kconfig"' fs/Kconfig
            sed -ie '/CRAMFS/i\obj-$(CONFIG_TUX3)\t\t+= tux3/' fs/Makefile
            ln -s ../../build/user/kernel fs/tux3
            """).strip(),
            workdir=stable_workdir,
            haltOnFailure=True,
            description=["patching kernel"],
            descriptionDone=["patch kernel"],
            name="patch kernel"
        ),
        # Download .config
        FileDownload(
            mastersrc="linux-configs/%s/.config.kvm-debug-%s" % (ver, arch),
            slavedest="../%s/.config" % stable_workdir,
            mode=0644,
        ),
        # Note: oldnoconfig sets new symbols to default value
        Compile(
            command="make oldnoconfig",
            workdir=stable_workdir,
            warningPattern="(%s|%s)" % (gccWarnPattern, modpostPattern),
            description=['compiling oldnoconfig'],
            descriptionDone=['compile oldnoconfig'],
            name="compile oldnoconfig",
        ),
        # Compile kernel
        Compile(
            command="make",
            workdir=stable_workdir,
            warningPattern="(%s|%s)" % (gccWarnPattern, modpostPattern),
            description=['compiling kernel'],
            descriptionDone=['compile kernel'],
            name="compile kernel",
        ),
        # Compile tux3 module
        Compile(
            command="make C=1 LINUX=../../../%s" % stable_workdir,
            workdir="build/user/kernel",
            warningPattern="(%s|%s)" % (gccWarnPattern, modpostPattern),
            description=['compiling module'],
            descriptionDone=['compile module'],
            name="compile module",
        ),
        # Compress vmlinux, then upload bzImage and vmlinux
        FileUpload(
            slavesrc="arch/%s/boot/bzImage" % arch,
            masterdest=WithProperties("public_html/" + master_vmlinuz_path),
            workdir=stable_workdir,
            mode=0644,
            url=WithProperties("/" + master_vmlinuz_path),
        ),
        ShellCommand(
            command="xz -v vmlinux",
            workdir=stable_workdir,
            hideStepIf=NotDebug,
            description=["xz vmlinux"],
            descriptionDone=["xz vmlinux"],
            name="xz vmlinux"
        ),
        FileUpload(
            slavesrc="vmlinux.xz",
            masterdest=WithProperties("public_html/" + getVmlinuxXz_path(ver)),
            workdir=stable_workdir,
            mode=0644,
            url=WithProperties("/" + getVmlinuxXz_path(ver)),
        ),
        # Start stress test
        Trigger(schedulerNames=[stress_buildname(arch, ver)],
                waitForFinish=False,
                updateSourceStamp=True,
                copy_properties={ 'master_basedir', 'got_revision' },
        ),
    ]

class FileUploadWithUrls(FileUpload):
    renderables = ["auxUrls"]

    def __init__(self, auxUrls=None, **kwargs):
        self.auxUrls = auxUrls

        FileUpload.__init__(self, **kwargs)

        self.addFactoryArguments(auxUrls=auxUrls)

    def start(self):
        if self.auxUrls is not None:
            for url in self.auxUrls:
                self.addURL(os.path.basename(url), url)

        FileUpload.start(self)

class KvmStart(ShellCommand):
    name = "kvm"
    haltOnFailure = True

    def __init__(self, script_name, sshkey_name, disks,
                 kernel_name, kernel_arch, kernel_ver, **kwargs):
        self.script_name = script_name
        self.sshkey_name = sshkey_name
        self.disks = disks
        self.kernel_name = kernel_name
        self.kernel_arch = kernel_arch
        self.kernel_ver = kernel_ver

        ShellCommand.__init__(self, **kwargs)

        self.addFactoryArguments(script_name=script_name,
                                 sshkey_name=sshkey_name,
                                 disks=disks,
                                 kernel_name=kernel_name,
                                 kernel_arch=kernel_arch,
                                 kernel_ver=kernel_ver)

    def start(self):
        disk_opts = ['-hda', '-hdb', '-hdc', '-hdd']
        arch = self.kernel_arch
        slavename = self.build.getSlaveName()
        slave = find_slave(arch, slavename)

        command = [
            self.script_name, "run",
            str(slave['kvm_port']), self.sshkey_name,
            "-smp", str(slave['kvm_cpus']),
            "-m", str(slave['kvm_mem']),
            "-kernel", self.kernel_name,
            "-append", "root=/dev/sda1 ro %s" % serial_console_opt[arch],
        ]

        for (opt, disk) in zip(disk_opts, self.disks):
            command.append(opt)
            command.append(disk)

        self.setCommand(command)
        ShellCommand.start(self)

class KvmStop(ShellCommand):
    name = "kvm"
    alwaysRun = True

    def __init__(self, script_name, vmcore_name="vmcore", checkstep=None,
                 **kwargs):
        self.script_name = script_name
        self.vmcore_name = vmcore_name
        self.checkstep = checkstep

        ShellCommand.__init__(self, **kwargs)

        self.addFactoryArguments(script_name=script_name,
                                 vmcore_name=vmcore_name,
                                 checkstep=checkstep)

    def start(self):
        allSteps = self.build.getStatus().getSteps()
        result = SUCCESS

        if self.checkstep is not None:
            for step in allSteps:
                if step.getName() == self.checkstep:
                    result = step.getResults()[0]
                    break

        command = [ self.script_name, "quit", ]

        # If checkstep was FAILURE, get kernel crashdump
#        if result != SUCCESS:
        if result == FAILURE:
            command.append("dump_serial")
            command.append(self.vmcore_name)
            self.setProperty('has_vmcore', 'Y', "KvmStop Step")
        else:
            command.append("serial")
            self.setProperty('has_vmcore', 'N', "KvmStop Step")

        self.setCommand(command)
        ShellCommand.start(self)

# Run stress test steps
def stress_steps(arch, ver):
    kvm_workdir = "../guest-images"
    tarball_name = "kvm-%s.tar.xz" % arch
    disk_name = "kvm-%s.qcow2" % arch
    tux3_disk = "tux3-disk.img"
    sshkey_name = "id_rsa-%s" % arch
    vmlinuz_name = getVmlinuz(ver)
    tests_name = "tests-%s.tar.xz" % arch
    master_vmlinuz_path = "%s/%s" % ("%(master_basedir)s", vmlinuz_name)
    master_tux3_path = "%s/%s" % ("%(master_basedir)s", tux3cmd_name)
    kvm_script = "bb-kvm.sh"
    vmcore_name = "vmcore-%s" % ver
    vmcore_xz_name = "%s.xz" % vmcore_name
    master_vmcore_xz_path = "%s/%s" % ("%(master_basedir)s", vmcore_xz_name)
    return [
        # Check whether need to download guest image
        SetProperty(
            property="need_image",
            command=textwrap.dedent("""\
            if [ -f %s ]; then
                echo N
            else
                echo Y
            fi
            """ % disk_name).strip(),
            workdir=kvm_workdir,
            hideStepIf=NotDebug,
        ),
        # Download guest image tarball if need
        FileDownload(
            mastersrc="guest-images/%s" % tarball_name,
            slavedest=tarball_name,
            workdir=kvm_workdir,
            mode=0644,
            doStepIf=lambda step: step.build.getProperty("need_image") == "Y",
        ),
        ShellCommand(
            command="tar xvf %s" % tarball_name,
            workdir=kvm_workdir,
            haltOnFailure=True,
            doStepIf=lambda step: step.build.getProperty("need_image") == "Y",
            description=["uncompressing image"],
            descriptionDone=["uncompress image"],
            name="uncompress image"
        ),
        # Download script for kvm
        FileDownload(
            mastersrc="guest-images/%s" % kvm_script,
            slavedest=kvm_script,
            workdir=".",
            mode=0755,
        ),
        # Download tests tools, tux3 command, and kernel for guest
        FileDownload(
            mastersrc="guest-images/%s" % tests_name,
            slavedest=tests_name,
            workdir=".",
            mode=0644,
        ),
        FileDownload(
            mastersrc=WithProperties("public_html/" + master_tux3_path),
            slavedest=tux3cmd_name,
            workdir=".",
            mode=0755,
        ),
        FileDownload(
            mastersrc=WithProperties("public_html/" + master_vmlinuz_path),
            slavedest=vmlinuz_name,
            workdir=".",
            mode=0644,
        ),
        # Make 8GB disk for tux3
        ShellCommand(
            command=["dd", "if=/dev/null", "of=%s" % tux3_disk,
                     "bs=1M", "count=0", "seek=8192"],
            workdir=".",
            description=['making %s' % tux3_disk],
            descriptionDone=['make %s' % tux3_disk],
            name="make %s" % tux3_disk,
        ),
        # Run guest
        KvmStart(
            script_name="./%s" % kvm_script,
            sshkey_name="%s/%s" % (kvm_workdir, sshkey_name),
            disks=["%s/%s" % (kvm_workdir, disk_name), tux3_disk],
            kernel_name=vmlinuz_name,
            kernel_arch=arch,
            kernel_ver=ver,
            workdir=".",
            description=['running kvm'],
            descriptionDone=['run kvm'],
            name="run kvm",
        ),
        # Copy tests tools and tux3 command to guest
        ShellCommand(
            command=["./%s" % kvm_script, "scp",
                     tests_name, tux3cmd_name, "localhost:"],
            workdir=".",
            description=['scp tools'],
            descriptionDone=['scp tools'],
            name="scp tools",
        ),
        # Run tests
        ShellCommand(
            command=["./%s" % kvm_script, "ssh",
                     "tar xvf %s && "
                     "(cd tests && ./test.sh ../%s /dev/sdb)"
                     % (tests_name, tux3cmd_name),
            ],
            workdir=".",
            description=['run stress'],
            descriptionDone=['run stress'],
            name="run stress",
        ),
        # Stop guest
        KvmStop(
            script_name="./%s" % kvm_script,
            vmcore_name=vmcore_name,
            checkstep="run stress",
            workdir=".",
            description=['stopping kvm'],
            descriptionDone=['stop kvm'],
            name="stop kvm",
        ),
        # Compress and upload vmcore if need, then remove
        ShellCommand(
            command="xz -v %s" % vmcore_name,
            workdir=".",
            alwaysRun=True,
            hideStepIf=NotDebug,
            doStepIf=lambda step: step.build.getProperty("has_vmcore") == "Y",
            description=["xz %s" % vmcore_name],
            descriptionDone=["xz %s" % vmcore_name],
            name="xz %s" % vmcore_name,
        ),
        FileUploadWithUrls(
            slavesrc=vmcore_xz_name,
            masterdest=WithProperties("public_html/" + master_vmcore_xz_path),
            workdir=".",
            mode=0644,
            url=WithProperties("/" + master_vmcore_xz_path),
            # Add url of vmlinux-<ver>.xz for convenience
            auxUrls=[
                WithProperties("/" + getVmlinuxXz_path(ver)),
            ],
            alwaysRun=True,
            doStepIf=lambda step: step.build.getProperty("has_vmcore") == "Y",
        ),
        RemoveDirectory(
            dir=vmcore_xz_name,
            alwaysRun=True,
            hideStepIf=NotDebug,
            doStepIf=lambda step: step.build.getProperty("has_vmcore") == "Y",
        ),
    ]

for arch in slaves_def.keys():
    # Builder for userspace-<arch>
    c['builders'].append(BuilderConfig(
        name=user_buildname(arch),
        slavenames=basic_slaves[arch],
        factory=BuildFactory(user_steps(arch)),
    ))

    for ver in kern_stable_vers:
        # Scheduler for kernel-<ver>-<arch>
        c['schedulers'].append(Triggerable(
            name=kern_buildname(arch, ver),
            builderNames=[ kern_buildname(arch, ver) ],
        ))
        # Builder for kernel-<ver>-<arch>
        c['builders'].append(BuilderConfig(
            name=kern_buildname(arch, ver),
            slavenames=basic_slaves[arch],
            factory=BuildFactory(kern_steps(arch, ver)),
        ))

        # Scheduler for stress-<ver>-<arch>
        c['schedulers'].append(Triggerable(
            name=stress_buildname(arch, ver),
            builderNames=[ stress_buildname(arch, ver) ],
        ))
        # Builder for stress-<ver>-<arch>
        c['builders'].append(BuilderConfig(
            name=stress_buildname(arch, ver),
            slavenames=stress_slaves[arch],
            factory=BuildFactory(stress_steps(arch, ver)),
        ))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

from buildbot.status import html, mail, words
from buildbot.status.web import authz, auth

c['status'] = []

authz_cfg = authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth = auth.BasicAuth([('tux3', 'tux3')]),
#    auth = auth.HTPasswdAuth(
#        os.path.join(os.path.dirname(__file__), ".htpasswd")
#    ),
    forceBuild = "auth", # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    gracefulShutdown = False,
    stopBuild = "auth",
    stopAllBuilds = False,
    cancelPendingBuild = "auth",
    stopChange = False,
    cleanShutdown = False,
    showUsersPage = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

#c['status'].append(mail.MailNotifier(
#    fromaddr="buildbot@localhost",
#    extraRecipients=['example@example.org'],
#    mode=['failing', 'warnings'],
#    sendToInterestedUsers=False,
#    addLogs=False,
#    relayhost="smtp.example.org",
#    smtpPort=587,
#    smtpUser="example@example.org",
#    smtpPassword="example-password",
#))
#
#c['status'].append(words.IRC(
#    host="irc.oftc.net",
#    nick="buildbot",
#    channels=[{'channel': '#tux3'}],
#    allowForce=False,
#    notify_events={
#        'exception': 1,
#        'successToFailure': 1,
#        'failureToSuccess': 1,
#    },
#))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "tux3"
c['titleURL'] = "http://tux3.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://%s:8010/" % masterHost

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # You can leave this at its default for all but the largest
    # installations.
    'db_url' : "sqlite:///state.sqlite",
}
